<?php 

/**
 * Zing Outsource Software
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@zosoft.net so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * We supply professinal magento support.
 *  - Custom Design, for layout, template, skin, style ...
 *  - Custom Module, for new featuers, actions, and other custom functions.
 *  - Product import/export, for import product from excel file or other online shop.
 *  - Other DIY for magento.
 * 
 * @category    ZoSoft
 * @package     Pz_WorldMap
 * 
 * @author      Cheng Wei <cheng.wei@zosoft.net>
 * @version     $$Id: online.phtml 18 2010-02-24 15:53:23Z cwei $$
 * @copyright   Copyright (C) 2010 Z.O. Software, China (http://www.zosoft.net)
 */

?>
<div id="<?php echo $this->getUniqId()?>_map" style="width: 250px; height: 200px"></div>

<script type="text/javascript">

PzMapCanvas = Class.create();
PzMapCanvas.prototype = {
	map: null,
	options: null,
	syncing: false,
	applying: false,
    initialize: function(uniqId, options) {
		this.options = $H({
			zoom: 2,
			center: new google.maps.LatLng(22.5, 0),
			mapTypeId: google.maps.MapTypeId.ROADMAP
		}).merge(options);

		this.target = uniqId+'_map';
		
		var uid = uniqId.split("_");
		this.container = uid[0]+'_'+uid[1];
		
		this.map = new google.maps.Map($(this.target), this.options.toObject());

		this.resize();

		google.maps.event.addListener(this.map, 'zoom_changed', this.apply.bind(this));
		google.maps.event.addListener(this.map, 'center_changed', this.apply.bind(this));

		$(this.container+"_map_zoom").observe('change', this.sync.bind(this));
		$(this.container+"_map_center_latitude").observe('change', this.sync.bind(this));
		$(this.container+"_map_center_longitude").observe('change', this.sync.bind(this));
		$(this.container+"_map_width").observe('change', this.resize.bind(this));
		$(this.container+"_map_height").observe('change', this.resize.bind(this));
	},
	resize: function() {
		var width = $F(this.container+"_map_width");
		var height = $F(this.container+"_map_height");
		$(this.target).setStyle({width: width+'px', height: height+'px'});
		google.maps.event.trigger(this.map, 'resize');
		this.sync();
	},
	sync: function() {
		if (this.applying) {
			return;
		}
		this.syncing = true;
		var latitude = $F(this.container+"_map_center_latitude");
		var longitude = $F(this.container+"_map_center_longitude");
		this.map.setCenter(new google.maps.LatLng(latitude, longitude));
		var zoom = $F(this.container+"_map_zoom");
		if (zoom == "") {
			$(this.container+"_map_zoom").value = zoom = 1;
		}
		this.map.setZoom(1*zoom);
		this.syncing = false;
	},
	apply: function() {
		if (this.syncing) {
			return;
		}
		this.applying = true;
		$(this.container+"_map_zoom").value = this.map.getZoom();
		$(this.container+"_map_center_latitude").value = this.map.getCenter().lat();
		$(this.container+"_map_center_longitude").value = this.map.getCenter().lng();
		this.applying = false;
	}
}

var canvas = new PzMapCanvas('<?php echo $this->getUniqId()?>');

</script>
